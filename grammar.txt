<stmt> ::= <intstmt> | <decstmt> | <strstmt> | <boolstmt> | <for-loop> | <while-loop> | <print-stmt> | <full-stmt>
<intstmt> ::= int <var> <assign> <num> | int <var> <assign> <num> <op> <num>
<decstmt> ::= dec <var> <assign> <num> . <num> | dec <var> <assign> <num>.<num> <op> <num>.<num>
<strstmt> ::= string <var> <assign> \<chars>\ | string <var> <assign> \<chars>\ add \<chars>\
<boolstmt> ::= bool <var> <assign> <truefalse>
<print-stmt> ::= *<var>* 
<assign> ::= ->
<truefalse> ::= T | F
<var> ::= <char><var> | <char><num>
<char> ::= <lower> | <upper>
<lower> ::= a | b | c | d | e | f | g | h | i | j | k | l | m | n | o | p | q | r | s | t | u |v | w | x | y | z
<upper> ::= A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W | X | Y | Z
<num> ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 
<op> ::= add | sub | div | mod
<comp> ::= gt | lt | equals
<logical> ::= <expr> | not <logical> | <expr> and <logical> | <expr> or <logical>
<comment> ::= ::<comment>::
<stmt2> ::= <if-stmt> | s1 | s2
<full-stmt> ::= <full-if> | s1 | s2
<if-stmt> ::= if <logical> then [ <full-stmt> ] else [ <stmt2> ] | if <logical> then [ <stmt2> ]
<full-if> ::= if <logical> then [ <full-stmt> ] else [ <full-stmt> ]
<expr> ::= <var> <comp> <num> | <var> <comp> <var> | <num> <comp> <num>
<for-loop> ::= as int <var> loops through (<num>, <num>), <stmt2>
<while-loop> ::= during int <var> loops through (<num>, <num>), <stmt2>
